# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Ubuntu CI

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/ubuntu-ci.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/ubuntu-ci.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CONAN_REVISIONS_ENABLED: "1"
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"

  # Workaround memory leak in HighFive
  # See: https://github.com/BlueBrain/HighFive/pull/583
  LSAN_OPTIONS: "suppressions=${{ github.workspace }}/lsan.supp"

jobs:
  matrix-factory:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-result.outputs.result }}
    steps:

      - name: Checkout repo
        uses: actions/checkout@v3
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.head_ref }}

      - name: Extract commit message
        id: extract-commit-message
        run: |
          # This is a workaround for empty github.event.head_commit.message when workflow was triggered by a PR
          if ${{ github.event_name == 'pull_request' }}; then
            echo "::set-output name=message::'$(git log -1 --pretty=%B)'"
          else
            echo "::set-output name=message::'${{ github.event.head_commit.message }}'"
          fi
      - name: Generate matrix
        uses: actions/github-script@v6
        id: set-result
        with:
          script: |
            // Documentation
            // https://docs.github.com/en/actions/learn-github-actions/contexts#fromjson
            // https://github.com/actions/runner/issues/982#issuecomment-809360765
            var commit_msg = "${{ steps.extract-commit-message.outputs.message }}"
            var ci_short = !commit_msg.includes('[ci full]')
            console.log("Commit message: %s", commit_msg)
            console.log("CI short: '%s'", ci_short.toString())
            var includes = []
            // Debug builds (short CI)
            includes.push({ image: 'conanio/gcc8-ubuntu16.04',      build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ image: 'conanio/gcc12-ubuntu16.04',     build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ image: 'conanio/clang8',                build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang14-ubuntu16.04',   build_type: 'Debug',   developer_mode: 'ON'  })
            // Release builds (short CI)
            includes.push({ image: 'conanio/gcc12-ubuntu16.04',     build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ image: 'conanio/clang14-ubuntu16.04',   build_type: 'Release', developer_mode: 'ON'  })
            if (ci_short) {
              return { include: includes }
            }
            // Debug builds (long CI)
            includes.push({ image: 'conanio/gcc9-ubuntu16.04',      build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ image: 'conanio/gcc10-ubuntu16.04',     build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ image: 'conanio/gcc11-ubuntu16.04',     build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ image: 'conanio/gcc12-ubuntu16.04',     build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ image: 'conanio/clang9',                build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang10-ubuntu16.04',   build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang11-ubuntu16.04',   build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang12-ubuntu16.04',   build_type: 'Debug',   developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang13-ubuntu16.04',   build_type: 'Debug',   developer_mode: 'ON'  })
            includes.push({ image: 'conanio/clang14-ubuntu16.04',   build_type: 'Debug',   developer_mode: 'ON'  })
            // Release builds (long CI)
            includes.push({ image: 'conanio/gcc8-ubuntu16.04',      build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ image: 'conanio/gcc9-ubuntu16.04',      build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ image: 'conanio/gcc10-ubuntu16.04',     build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ image: 'conanio/gcc11-ubuntu16.04',     build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ image: 'conanio/clang8',                build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang9',                build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang10-ubuntu16.04',   build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang11-ubuntu16.04',   build_type: 'Release', developer_mode: 'OFF' })
            includes.push({ image: 'conanio/clang12-ubuntu16.04',   build_type: 'Release', developer_mode: 'ON'  })
            includes.push({ image: 'conanio/clang13-ubuntu16.04',   build_type: 'Release', developer_mode: 'ON'  })
            // Make sure project builds with CMake 3.18
            includes.push({ image: 'conanio/clang14-ubuntu16.04',   build_type: 'Release', developer_mode: 'OFF' })
            // Make sure project builds with make
            includes.push({ image: 'conanio/clang14-ubuntu16.04',   build_type: 'Release', developer_mode: 'OFF' })
            return { include: includes }

  build-project:
    needs: matrix-factory
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-factory.outputs.matrix) }}

    container:
      image: ${{ matrix.image }}:latest
      options: "-v ${{ github.workspace }}:${{ github.workspace }} --user=root"

    steps:
      - uses: actions/checkout@v3

      - name: Update CMake
        run: pip install --no-cache-dir 'cmake==3.24.*'

      - name: Generate cache key
        id: cache-key
        run: |
          image="${{ matrix.image }}"
          build_type="${{ matrix.build_type }}"
          hash="${{ hashFiles('conanfile.py', '.github/workflows/ubuntu-ci.yml') }}"

          echo "::set-output name=key::$image-$build_type-$hash"

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_USER_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Install build dependencies
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan install conanfile.py                  \
             --build outdated                         \
             -s build_type="${{ matrix.build_type }}" \
             -s compiler.libcxx=libstdc++11           \
             -s compiler.cppstd=17

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs
          conan remove -f "*" --outdated

      - name: Configure project
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}          \
                -DENABLE_DEVELOPER_MODE=${{ matrix.developer_mode }} \
                -DOPT_ENABLE_CLANG_TIDY=OFF                          \
                -DOPT_ENABLE_CPPCHECK=OFF                            \
                -DENABLE_TESTING=ON                                  \
                -DBUILD_EXAMPLES=ON                                  \
                -S "${{ github.workspace }}"                         \
                -B "${{ github.workspace }}/build"

      - name: Build project
        run: cmake --build ${{ github.workspace }}/build -j $(nproc)

      - name: Run unit tests
        working-directory: ${{ github.workspace }}/build
        run: |
          ctest --test-dir .        \
                --schedule-random   \
                --output-on-failure \
                --no-tests=error    \
                --timeout 240       \
                -j $(nproc)
