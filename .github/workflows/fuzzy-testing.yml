# Copyright (C) 2023 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Run fuzzy tests

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/fuzzy-testing.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/scripts/fuzzy_test.py"
      - "test/scripts/link_h5_dataset.py"
      - "CMakeLists.txt"
      - "conanfile.txt"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/fuzzy-testing.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/scripts/fuzzy_test.py"
      - "test/scripts/link_h5_dataset.py"
      - "CMakeLists.txt"
      - "conanfile.txt"

  schedule:
    # Run weekly
    - cron: '15 3 * * 0'

  workflow_dispatch:
    inputs:
      duration:
        description: 'Test duration in seconds'
        required: true
        default: '600'
        type: string


# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  TEST_DATASET_URL: 'https://4dn-open-data-public.s3.amazonaws.com/fourfront-webprod/wfoutput/27bbfb40-0224-427c-be41-398b43d70c48/4DNFI9FVHJZQ.mcool'
  TEST_DATASET_SHA256: '1bd4b092fada8aedfcf878befba29b1ef3b7adbc7efeb539cd7e381eb3922158'

jobs:
  preproc-test-dataset:
    name: Preprocess test dataset
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.collect-metadata.outputs.key }}
      cooler-uri: ${{ steps.collect-metadata.outputs.uri }}

    steps:
      - name: Collect metadata
        id: collect-metadata
        run: |
          key="test-dataset-$TEST_DATASET_SHA256"
          uri="test/data/$(basename "$TEST_DATASET_URL")::/resolutions/1000"

          echo "key=$key" >> $GITHUB_OUTPUT
          echo "uri=$uri" >> "$GITHUB_OUTPUT"

      - name: Check test dataset is already cached
        id: check-cache
        uses: actions/cache@v3
        with:
          lookup-only: true
          key: ${{ steps.collect-metadata.outputs.key }}
          path: test/data/

      - name: Cache test datasets
        uses: actions/cache@v3
        if: steps.check-cache.outputs.cache-hit != 'true'
        with:
          key: ${{ steps.collect-metadata.outputs.key }}
          path: test/data/

      - uses: actions/checkout@v3
        if: steps.check-cache.outputs.cache-hit != 'true'

      - name: Download test dataset
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p test/data
          cd test/data
          curl -L "$TEST_DATASET_URL" -o test.mcool

      - name: Checksum test dataset
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          echo "$TEST_DATASET_SHA256  test/data/test.mcool" > checksum.sha256
          shasum -c checksum.sha256

      - name: Generate requirements.txt
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          echo 'cooler>=0.9.1' > requirements.txt

      - name: Setup Python
        if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: pip

      - name: Install Cooler
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          pip3 install -r requirements.txt

      - name: Remove unused resolutions
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          cooler cp 'test.mcool::/resolutions/1000' \
                    "${{ steps.collect-metadata.outputs.uri }}"

          ls -lah test/data/*.mcool
          rm test/data/test.mcool

      - name: Rename default weight dataset
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          test/scripts/link_h5_dataset.py \
            "${{ steps.collect-metadata.outputs.uri }}" \
            bins/weight \
            bins/ICE


  build-project:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/paulsengroup/ci-docker-images/ubuntu-22.04-cxx-clang-15
      options: "--user=root"

    env:
      CONAN_HOME: '/root/.conan2'

    steps:
      - uses: actions/checkout@v3

      - name: Fix permissions
        run: |
          chown -R $(id -u):$(id -g) $PWD

      - name: Generate cache key
        id: cache-key
        run: |
          hash="${{ hashFiles('conanfile.txt', '.github/workflows/fuzzy-testing.yml') }}"

          echo "key=fuzzy-testing-$hash" >> $GITHUB_OUTPUT

      - name: Restore Conan cache
        id: cache-conan
        uses: actions/cache/restore@v3
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source
          conan remove --confirm "*"

      - name: Install build dependencies
        run: |
          conan install .                             \
             --build=missing                          \
             --build=cascade                          \
             -pr:b="$CONAN_DEFAULT_PROFILE_PATH"      \
             -pr:h="$CONAN_DEFAULT_PROFILE_PATH"      \
             -s build_type=Release                    \
             -s compiler.libcxx=libstdc++11           \
             -s compiler.cppstd=17                    \
             --output-folder=build

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan cache clean "*" --build
          conan cache clean "*" --download
          conan cache clean "*" --source

      - name: Save Conan cache
        uses: actions/cache/save@v3
        if: steps.cache-conan.outputs.cache-hit != 'true'
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_HOME }}

      - name: Configure project
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release                   \
                -DCMAKE_PREFIX_PATH="$PWD/build"             \
                -DENABLE_DEVELOPER_MODE=ON                   \
                -DOPT_ENABLE_SANITIZER_ADDRESS=ON            \
                -DOPT_ENABLE_SANITIZER_LEAK=ON               \
                -DOPT_ENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON \
                -DOPT_ENABLE_CLANG_TIDY=OFF                  \
                -DCOOLERPP_BUILD_EXAMPLES=ON                 \
                -DCOOLERPP_ENABLE_TESTING=OFF                \
                -S .                                         \
                -B build

      - name: Build project
        run: cmake --build build -j $(nproc)

      - name: Upload coolerpp_dump
        uses: actions/upload-artifact@v3
        with:
          name: coolerpp-dump-fuzzy-testing
          path: build/examples/coolerpp_dump
          if-no-files-found: error
          retention-days: 1

  run-tests:
    runs-on: ubuntu-latest
    needs: [ build-project, preproc-test-dataset ]
    container:
      image: ubuntu:22.04

    strategy:
      fail-fast: false
      matrix:
        balance: [ 'raw', 'ICE', 'KR']

    steps:
      - uses: actions/checkout@v3

      - name: Install test dependencies
        run: |
          apt-get update
          apt-get install -y python3-pip zstd
          pip install --no-cache-dir 'cooler>=0.9.1'

      - name: Download coolerpp_dump
        uses: actions/download-artifact@v3
        with:
          name: coolerpp-dump-fuzzy-testing

      - name: Cache test dataset
        uses: actions/cache@v3
        with:
          key: ${{ needs.preproc-test-dataset.outputs.cache-key }}
          fail-on-cache-miss: true
          path: test/data/

      - name: Prepare for test
        id: test-params
        env:
          PYTHONHASHSEED: 0
        run: |
          seed="$(python3 -c 'import random; print(random.randint(0, 2**32))')"

          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            duration='${{ inputs.duration }}'
          else
            duration=600
          fi

          2>&1 echo "Seed: ${seed}"
          2>&1 echo "Duration: ${duration}"

          echo "seed=$seed" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT

          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            duration='${{ inputs.duration }}'
          else
            duration=600
          fi

          2>&1 echo "Seed: ${seed}"
          2>&1 echo "Duration: ${duration}"

          echo "seed=$seed" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT

      - name: Run test
        run: |
          chmod 755 coolerpp_dump
          coolerpp_dump="$(readlink -f ./coolerpp_dump)"

          test/scripts/fuzzy_test.py \
            --path-to-coolerpp-dump="$coolerpp_dump" \
            --seed '${{ steps.test-params.outputs.seed }}' \
            --duration '${{ steps.test-params.outputs.duration }}' \
            --balance ${{ matrix.balance }} \
            "${{ needs.preproc-test-dataset.outputs.cooler-uri }}"

  fuzzy-testing-status-check:
    name: Status Check (fuzzy-testing)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - preproc-test-dataset
      - build-project
      - run-tests

    steps:
      - name: Collect job results
        if: |
          needs.preproc-test-dataset.result != 'success' ||
          needs.build-project.result != 'success'        ||
          needs.run-tests.result != 'success'
        run: exit 1
