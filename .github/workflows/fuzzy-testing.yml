# Copyright (C) 2023 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Run fuzzy tests

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/fuzzy-testing.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/scripts/fuzzy_test.py"
      - "CMakeLists.txt"
      - "conanfile.py"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/fuzzy-testing.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/scripts/fuzzy_test.py"
      - "CMakeLists.txt"
      - "conanfile.py"

  schedule:
    # Run weekly
    - cron: '15 3 * * 0'

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"
  TEST_DATASET_URL: 'https://4dn-open-data-public.s3.amazonaws.com/fourfront-webprod/wfoutput/27bbfb40-0224-427c-be41-398b43d70c48/4DNFI9FVHJZQ.mcool'
  TEST_DATASET_SHA256: '1bd4b092fada8aedfcf878befba29b1ef3b7adbc7efeb539cd7e381eb3922158'

jobs:
  preproc-test-dataset:
    name: Preprocess test dataset
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.generate-cache-key.outputs.key }}

    steps:
      - name: Generate cache key
        id: generate-cache-key
        run: |
          key="test-dataset-$TEST_DATASET_SHA256"
          echo "key=$key" >> $GITHUB_OUTPUT

      - name: Cache test datasets
        id: cache-dataset
        uses: actions/cache@v3
        with:
          key: ${{ steps.generate-cache-key.outputs.key }}
          path: test/data/

      - name: Download test dataset
        if: steps.cache-dataset.outputs.cache-hit != 'true'
        run: |
          mkdir -p test/data
          cd test/data
          curl -LO "$TEST_DATASET_URL"

      - name: Checksum test dataset
        if: steps.cache-dataset.outputs.cache-hit != 'true'
        run: |
          echo "$TEST_DATASET_SHA256  test/data/$(basename "$TEST_DATASET_URL")" > checksum.sha256
          shasum -c checksum.sha256

      - name: Generate requirements.txt
        if: steps.cache-dataset.outputs.cache-hit != 'true'
        run: |
          echo 'cooler>=0.9.1' > requirements.txt

      - name: Setup Python
        if: steps.cache-dataset.outputs.cache-hit != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: pip

      - name: Install Cooler
        if: steps.cache-dataset.outputs.cache-hit != 'true'
        run: |
          pip3 install -r requirements.txt

      - name: Remove unused resolutions
        if: steps.cache-dataset.outputs.cache-hit != 'true'
        run: |
          src="test/data/$(basename "$TEST_DATASET_URL")"
          dest="$src.new"

          cooler cp "$src::/resolutions/1000" "$dest::/resolutions/1000"

          ls -lah test/data/*.mcool*
          mv "$dest" "$src"

  build-project:
    runs-on: ubuntu-latest
    container:
      image: conanio/clang14-ubuntu16.04:1.59.0
      options: "-v ${{ github.workspace }}:${{ github.workspace }} --user root"

    steps:
      - uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          pip install --no-cache-dir 'cmake>=3.20'

      - name: Generate cache key
        id: cache-key
        run: |
          hash="${{ hashFiles('conanfile.py', '.github/workflows/fuzzy-testing.yml') }}"

          echo "key=fuzzy-testing-$hash" >> $GITHUB_OUTPUT

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          key: ${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_USER_HOME }}

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Install build dependencies
        working-directory: ${{ github.workspace }}/build
        run: |
          conan install ../conanfile.py     \
             --build outdated               \
             -s build_type=Release          \
             -s compiler.libcxx=libstdc++11 \
             -s compiler.cppstd=17

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs
          conan remove -f "*" --outdated

      - name: Configure project
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          mkdir ${{ github.workspace }}/build
          cmake -DCMAKE_BUILD_TYPE=Release    \
                -DENABLE_DEVELOPER_MODE=OFF   \
                -DCOOLERPP_BUILD_EXAMPLES=ON  \
                -DCOOLERPP_ENABLE_TESTING=OFF \
                -S "${{ github.workspace }}"  \
                -B "${{ github.workspace }}/build"

      - name: Build project
        run: cmake --build ${{ github.workspace }}/build -j $(nproc)

      - name: Upload coolerpp_dump
        uses: actions/upload-artifact@v3
        with:
          name: coolerpp-dump-fuzzy-testing
          path: ${{ github.workspace }}/build/examples/coolerpp_dump
          if-no-files-found: error
          retention-days: 1

  run-tests:
    runs-on: ubuntu-latest
    needs: [ build-project, preproc-test-dataset ]
    container:
      image: ubuntu:22.04
      options: "-v ${{ github.workspace }}:${{ github.workspace }}"

    steps:
      - uses: actions/checkout@v3

      - name: Install test dependencies
        run: |
          apt-get update
          apt-get install -y python3-pip
          pip install --no-cache-dir 'cooler>=0.9.1'

      - name: Download coolerpp_dump
        uses: actions/download-artifact@v3
        with:
          name: coolerpp-dump-fuzzy-testing

      - name: Cache test dataset
        uses: actions/cache@v3
        with:
          key: ${{ needs.preproc-test-dataset.outputs.cache-key }}
          path: test/data/

      - name: Run test
        env:
          PYTHONHASHSEED: 0
        run: |
          seed="$(python3 -c 'import random; print(random.randint(0, 2**32))')"
          2>&1 echo "Seed: ${seed}"

          cooler_uri="test/data/$(basename "$TEST_DATASET_URL")::/resolutions/1000"

          chmod 755 coolerpp_dump
          coolerpp_dump="$(readlink -f ./coolerpp_dump)"

          test/scripts/fuzzy_test.py \
            --path-to-coolerpp-dump="$coolerpp_dump" \
            --seed="$seed" \
            --duration 600 \
            "$cooler_uri"

  fuzzy-testing-status-check:
    name: Status Check (fuzzy-testing)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - preproc-test-dataset
      - build-project
      - run-tests

    steps:
      - name: Collect job results
        if: |
          needs.preproc-test-dataset.result != 'success' ||
          needs.build-project.result != 'success'        ||
          needs.run-tests.result != 'success'
        run: exit 1
