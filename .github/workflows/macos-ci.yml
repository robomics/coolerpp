# Copyright (C) 2022 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: MacOS CI

on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/macos-ci.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
      - "lsan.supp"
    tags:
      - 'v*.*.*'

  pull_request:
    paths:
      - ".github/workflows/macos-ci.yml"
      - "cmake/**"
      - "examples/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
      - "lsan.supp"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"

  # Workaround memory leak in HighFive
  # See: https://github.com/BlueBrain/HighFive/pull/583
  LSAN_OPTIONS: "suppressions=${{ github.workspace }}/lsan.supp"

defaults:
  run:
    shell: bash

jobs:
  build-project:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { compiler: clang, os: 'macos-10.15', conan-ver: '1.58.*', cmake-ver: '3.25.*', build_type: Release, developer_mode: OFF }
          - { compiler: clang, os: 'macos-11',    conan-ver: '1.58.*', cmake-ver: '3.25.*', build_type: Release, developer_mode: OFF }
          - { compiler: clang, os: 'macos-12',    conan-ver: '1.58.*', cmake-ver: '3.25.*', build_type: Release, developer_mode: OFF }
          - { compiler: clang, os: 'macos-12',    conan-ver: '1.58.*', cmake-ver: '3.25.*', build_type: Debug,   developer_mode: OFF }

    steps:
      - uses: actions/checkout@v3

      - name: Generate requirements.txt for pip
        run: |
          echo 'conan==${{ matrix.conan-ver }}' > requirements.txt
          echo 'cmake==${{ matrix.cmake-ver }}' >> requirements.txt

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Detect number available CPUs
        run: |
          ncpus=$(python -c 'import multiprocessing as mp; print(mp.cpu_count())')

          echo "CMAKE_BUILD_PARALLEL_LEVEL=$ncpus" >> $GITHUB_ENV
          echo "CTEST_PARALLEL_LEVEL=$ncpus" >> $GITHUB_ENV

      - name: Install deps with PIP
        run: |
          pip install -r requirements.txt

      - name: Generate cache key
        id: cache-key
        run: |
          set -u
          
          os="${{ matrix.os }}"
          compiler="${{ matrix.compiler }}"
          build_type="${{ matrix.build_type }}"
          hash="${{ hashFiles('conanfile.py', '.github/workflows/macos-ci.yml') }}"

          echo "key=$os-$compiler-$hash-$build_type" >> $GITHUB_OUTPUT

      - name: Cache Conan packages
        id: cache-conan
        uses: actions/cache@v3
        with:
          key: conan-${{ steps.cache-key.outputs.key }}
          path: ${{ env.CONAN_USER_HOME }}

      - name: Configure Conan
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan profile new "$CONAN_USER_HOME/profiles/default" --detect --force
          conan config init
          conan profile update settings.compiler=${{ matrix.compiler-name }} default
          conan profile update settings.compiler.version=${{ matrix.compiler-version }} default
          conan profile update settings.compiler.cppstd=17 default
          # Add apple-clang 14.0 to settings.yml
          sed -i.bak 's/"10.0", "11.0", "12.0", "13", "13.0", "13.1"\]/"10.0", "11.0", "12.0", "13", "13.0", "13.1", "14.0"\]/' \
            "$CONAN_USER_HOME/.conan/settings.yml"

      - name: Clean Conan cache (pre-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Suppress ASAN and LSAN warnings
        run: |
          # Workaround memory leak in HighFive
          # See: https://github.com/BlueBrain/HighFive/pull/583

          echo 'interceptor_via_fun:-[HighFive::HDF5ErrMapper walkStack]' > /tmp/asan.supp
          echo 'interceptor_via_fun:-[HighFive::HDF5ErrMapper walkStack]' > /tmp/leak.supp

          echo 'ASAN_OPTIONS=suppressions=/tmp/asan.supp' >> $GITHUB_ENV
          echo 'LSAN_OPTIONS=suppressions=/tmp/leak.supp' >> $GITHUB_ENV

      - name: Configure project
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}          \
                -DENABLE_DEVELOPER_MODE=${{ matrix.developer_mode }} \
                -DCOOLERPP_ENABLE_TESTING=ON                         \
                -DCOOLERPP_BUILD_EXAMPLES=ON                         \
                -DOPT_ENABLE_CLANG_TIDY=OFF                          \
                -DOPT_ENABLE_CPPCHECK=OFF                            \
                -S "${{ github.workspace }}"                         \
                -B "${{ github.workspace }}/build"

      - name: Clean Conan cache (post-build)
        if: steps.cache-conan.outputs.cache-hit != 'true'
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs
          conan remove -f "*" --outdated

      - name: Build project
        run: cmake --build ${{ github.workspace }}/build

      - name: Run unit tests
        working-directory: ${{ github.workspace }}/build
        run: |
          ctest --test-dir .        \
                --schedule-random   \
                --output-on-failure \
                --no-tests=error    \
                --timeout 180       \
                -E '.*LONG.*'


  macos-ci-status-check:
    name: Status Check (MacOS CI)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-project

    steps:
      - name: Collect job results
        if: needs.build-project.result != 'success'
        run: exit 1
